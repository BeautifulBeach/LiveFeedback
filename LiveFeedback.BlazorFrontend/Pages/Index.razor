@page "/"
@using System.Text.Json
@using LiveFeedback.BlazorFrontend.Serivces
@using LiveFeedback.Shared
@using LiveFeedback.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.JSInterop
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;

<main>
    @if (_isConnected is false)
    {
        <h2>Es konnte keine Verbindung zum Server hergestellt werden ðŸ˜”</h2>
    }
    else if (_isConnected is true)
    {
        @switch (_lecturesAvailable.Count)
        {
            case >= 2:
                <h2>Veranstaltung auswÃ¤hlen:</h2>
                @foreach (Lecture lecture in _lecturesAvailable)
                {
                    <button class="lecture" @onclick="() => { SelectLecture(lecture.Id);}">
                        @if (lecture.Name is not null)
                        {
                            <div>@lecture.Name</div>
                        }
                        @if (lecture.Room is not null)
                        {
                            <div>@lecture.Room</div>
                        }
                        @lecture.Id
                    </button>
                }

                break;
            case > 0:
                <div class="slider-box">
                    <input id="slider" type="range" min="0" max="100" @bind="_sliderValue"
                           oninput="@HandleSliderChange"/>
                </div>
                <div class="slider-value">
                    @_sliderValue %
                </div>
                <button class="exit-btn">Teilnahme beenden</button>
                break;
            default:
                <h2>Keine Veranstaltungen verfÃ¼gbar ðŸ˜”</h2>
                <div>Stellen Sie sicher, dass die Veranstaltung auf dem PrÃ¤sentatoren-PC gestartet wurde</div>
                break;
        }
    }
</main>

@code {
    private ushort _sliderValue = Constants.DefaultRating;
    private HubConnection _hubConnection = null!;
    private bool? _isConnected;
    private string _clientId = "";
    private Lecture _currentLecture = new Lecture();
    private List<Lecture> _lecturesAvailable = [];
    //private readonly SignalRService _signalRService = new SignalRService();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && _isConnected is not (null or false))
        {
            return;
        }

        Uri uri = NavigationManager.ToAbsoluteUri("/slider-hub");
        _clientId = await GetLocalStorage("clientId") ?? "";
        _currentLecture.Id = await GetLocalStorage("lectureId") ?? "";

        Dictionary<string, string?> queryParams = new()
        {
            { "group", "default" },
            { "clientId", _clientId },
            { "lectureId", _currentLecture.Id },
        };
        string url = QueryHelpers.AddQueryString(uri.ToString(), queryParams);

        // Do NOT enable automatic reconnect, it causes weird bugs
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(url)
            .Build();

        // Message from the server for the frontend to report its client ID so it can be attached to future requests
        _hubConnection.On<string>(Messages.PersistClientId, async (id) =>
        {
            await SetLocalStorage("clientId", id);
            _clientId = id;
        });
        _hubConnection.On<string>(Messages.PersistLectureId, async (id) =>
        {
            Console.WriteLine($"Persist lecture ID: {id}!");
            await SetLocalStorage("lectureId", id);
            _currentLecture.Id = id;
        });

        try
        {
            await _hubConnection.StartAsync();
            _isConnected = true;
            _lecturesAvailable = await GetCurrentLecturesFromServer();
            if (_lecturesAvailable.Count == 1)
            {
                _currentLecture = _lecturesAvailable.First();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Failed to connect to server: {e.Message}");
            _isConnected = false;
        }

        _sliderValue = ushort.Parse(await GetLocalStorage("lastRating") ?? Constants.DefaultRating.ToString());
        StateHasChanged();
        await SendRatingToServer(_sliderValue);
    }

    private async Task HandleSliderChange(ChangeEventArgs e)
    {
        _sliderValue = ushort.TryParse(e.Value?.ToString(), out ushort newValue) ? newValue : _sliderValue;
        await SendRatingToServer(_sliderValue);
        await SetLocalStorage("lastRating", _sliderValue.ToString());
    }

    private async Task SendRatingToServer(ushort rating)
    {
        try
        {
            RatingMessage<ushort> message = new()
            {
                ClientId = _clientId,
                LectureId = _currentLecture.Id,
                Rating = rating
            };
            await _hubConnection.InvokeAsync("RatingReport", message);
        }
        catch (Exception err)
        {
            Console.WriteLine($"Error on the Client: {err.Message}");
        }
    }

    private async Task<List<Lecture>> GetCurrentLecturesFromServer()
    {
        if (_hubConnection.State == HubConnectionState.Connected)
            return await _hubConnection.InvokeAsync<List<Lecture>>("GetCurrentLectures");

        return [];
    }

    private void SelectLecture(string lectureId)
    {
        foreach (Lecture lecture in _lecturesAvailable.Where(lecture => lecture.Id == lectureId))
        {
            _currentLecture = lecture;
            _lecturesAvailable = _lecturesAvailable.Where(l => l.Id == lectureId).ToList();
        }
    }

    private async Task SetLocalStorage(string key, string value)
    {
        await JsRuntime.InvokeVoidAsync("localStorage.setItem", key, value);
    }

    private async Task<string?> GetLocalStorage(string key)
    {
        return await JsRuntime.InvokeAsync<string>("localStorage.getItem", key);
    }

}